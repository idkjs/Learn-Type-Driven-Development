// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Id = require("bs-platform/lib/js/belt_Id.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var NoValidation = {
  checkError: undefined
};

function Compose(V1, V2) {
  var match = V1.checkError;
  var match$1 = V2.checkError;
  var checkError = match !== undefined ? (
      match$1 !== undefined ? (function (s) {
            var e = Curry._1(match, s);
            if (e !== undefined) {
              return e;
            } else {
              return Curry._1(match$1, s);
            }
          }) : match
    ) : (
      match$1 !== undefined ? match$1 : undefined
    );
  return {
          checkError: checkError
        };
}

var RegexMatchError = Caml_exceptions.create("String-ReasonmlDemoFunctors.Validation.RegexMatchError");

function MatchRegex(Config) {
  var checkError = (function (s) {
      var match = Config.regex.exec(s);
      if (match !== null) {
        return ;
      } else {
        return {
                RE_EXN_ID: RegexMatchError,
                _1: s,
                _2: Config.regex
              };
      }
    });
  return {
          checkError: checkError,
          regex: Config.regex
        };
}

var TooShort = Caml_exceptions.create("String-ReasonmlDemoFunctors.Validation.TooShort");

function MinLength(N) {
  var checkError = (function (s) {
      if (s.length < N.n) {
        return {
                RE_EXN_ID: TooShort,
                _1: s,
                _2: N.n
              };
      }
      
    });
  return {
          checkError: checkError
        };
}

var TooLong = Caml_exceptions.create("String-ReasonmlDemoFunctors.Validation.TooLong");

function MaxLength(N) {
  var checkError = (function (s) {
      if (s.length > N.n) {
        return {
                RE_EXN_ID: TooLong,
                _1: s,
                _2: N.n
              };
      }
      
    });
  return {
          checkError: checkError
        };
}

var WrongLength = Caml_exceptions.create("String-ReasonmlDemoFunctors.Validation.WrongLength");

function ExactLength(N) {
  var checkError = (function (s) {
      if (s.length !== N.n) {
        return {
                RE_EXN_ID: WrongLength,
                _1: s,
                _2: N.n
              };
      }
      
    });
  return {
          checkError: checkError
        };
}

var Validation = {
  NoValidation: NoValidation,
  Compose: Compose,
  RegexMatchError: RegexMatchError,
  MatchRegex: MatchRegex,
  TooShort: TooShort,
  MinLength: MinLength,
  TooLong: TooLong,
  MaxLength: MaxLength,
  WrongLength: WrongLength,
  ExactLength: ExactLength
};

function Make(Validator, $star) {
  var check = Validator.checkError;
  var fromString = check !== undefined ? (function (s) {
        var exn = Curry._1(check, s);
        if (exn !== undefined) {
          throw exn;
        }
        return s;
      }) : (function (prim) {
        return prim;
      });
  var resultFromString = function (s) {
    try {
      return {
              TAG: /* Ok */0,
              _0: Curry._1(fromString, s)
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return {
              TAG: /* Error */1,
              _0: e
            };
    }
  };
  var toJson = function (s) {
    return s;
  };
  var fromJson = function (j) {
    return Curry._1(fromString, Json_decode.string(j));
  };
  var eq = Caml_obj.caml_equal;
  return {
          fromString: fromString,
          resultFromString: resultFromString,
          unsafeFromStringNoValidation: (function (prim) {
              return prim;
            }),
          toString: (function (prim) {
              return prim;
            }),
          toJson: toJson,
          fromJson: fromJson,
          eq: eq
        };
}

function MakeCompare(S) {
  var cmp = Caml_obj.caml_compare;
  return Belt_Id.MakeComparable({
              cmp: cmp
            });
}

function MakeSet(Item) {
  var fromArray = function (param) {
    return Belt_Set.fromArray(param, Item);
  };
  var fromList = function (l) {
    return Belt_Set.fromArray(Belt_List.toArray(l), Item);
  };
  var empty = Belt_Set.fromArray([], Item);
  var singleton = function (x) {
    return Belt_Set.fromArray([x], Item);
  };
  return {
          Int: Belt_Set.Int,
          $$String: Belt_Set.$$String,
          Dict: Belt_Set.Dict,
          make: Belt_Set.make,
          fromSortedArrayUnsafe: Belt_Set.fromSortedArrayUnsafe,
          isEmpty: Belt_Set.isEmpty,
          has: Belt_Set.has,
          add: Belt_Set.add,
          mergeMany: Belt_Set.mergeMany,
          remove: Belt_Set.remove,
          removeMany: Belt_Set.removeMany,
          union: Belt_Set.union,
          intersect: Belt_Set.intersect,
          diff: Belt_Set.diff,
          subset: Belt_Set.subset,
          cmp: Belt_Set.cmp,
          eq: Belt_Set.eq,
          forEachU: Belt_Set.forEachU,
          forEach: Belt_Set.forEach,
          reduceU: Belt_Set.reduceU,
          reduce: Belt_Set.reduce,
          everyU: Belt_Set.everyU,
          every: Belt_Set.every,
          someU: Belt_Set.someU,
          some: Belt_Set.some,
          keepU: Belt_Set.keepU,
          keep: Belt_Set.keep,
          partitionU: Belt_Set.partitionU,
          partition: Belt_Set.partition,
          size: Belt_Set.size,
          toArray: Belt_Set.toArray,
          toList: Belt_Set.toList,
          minimum: Belt_Set.minimum,
          minUndefined: Belt_Set.minUndefined,
          maximum: Belt_Set.maximum,
          maxUndefined: Belt_Set.maxUndefined,
          get: Belt_Set.get,
          getUndefined: Belt_Set.getUndefined,
          getExn: Belt_Set.getExn,
          split: Belt_Set.split,
          checkInvariantInternal: Belt_Set.checkInvariantInternal,
          getData: Belt_Set.getData,
          getId: Belt_Set.getId,
          packIdData: Belt_Set.packIdData,
          fromArray: fromArray,
          fromList: fromList,
          empty: empty,
          singleton: singleton
        };
}

function MakeStringSet(S) {
  var cmp = Caml_obj.caml_compare;
  var Item = Belt_Id.MakeComparable({
        cmp: cmp
      });
  var fromArray = function (param) {
    return Belt_Set.fromArray(param, Item);
  };
  var fromList = function (l) {
    return Belt_Set.fromArray(Belt_List.toArray(l), Item);
  };
  var empty = Belt_Set.fromArray([], Item);
  var singleton = function (x) {
    return Belt_Set.fromArray([x], Item);
  };
  return {
          Int: Belt_Set.Int,
          $$String: Belt_Set.$$String,
          Dict: Belt_Set.Dict,
          make: Belt_Set.make,
          fromSortedArrayUnsafe: Belt_Set.fromSortedArrayUnsafe,
          isEmpty: Belt_Set.isEmpty,
          has: Belt_Set.has,
          add: Belt_Set.add,
          mergeMany: Belt_Set.mergeMany,
          remove: Belt_Set.remove,
          removeMany: Belt_Set.removeMany,
          union: Belt_Set.union,
          intersect: Belt_Set.intersect,
          diff: Belt_Set.diff,
          subset: Belt_Set.subset,
          cmp: Belt_Set.cmp,
          eq: Belt_Set.eq,
          forEachU: Belt_Set.forEachU,
          forEach: Belt_Set.forEach,
          reduceU: Belt_Set.reduceU,
          reduce: Belt_Set.reduce,
          everyU: Belt_Set.everyU,
          every: Belt_Set.every,
          someU: Belt_Set.someU,
          some: Belt_Set.some,
          keepU: Belt_Set.keepU,
          keep: Belt_Set.keep,
          partitionU: Belt_Set.partitionU,
          partition: Belt_Set.partition,
          size: Belt_Set.size,
          toArray: Belt_Set.toArray,
          toList: Belt_Set.toList,
          minimum: Belt_Set.minimum,
          minUndefined: Belt_Set.minUndefined,
          maximum: Belt_Set.maximum,
          maxUndefined: Belt_Set.maxUndefined,
          get: Belt_Set.get,
          getUndefined: Belt_Set.getUndefined,
          getExn: Belt_Set.getExn,
          split: Belt_Set.split,
          checkInvariantInternal: Belt_Set.checkInvariantInternal,
          getData: Belt_Set.getData,
          getId: Belt_Set.getId,
          packIdData: Belt_Set.packIdData,
          fromArray: fromArray,
          fromList: fromList,
          empty: empty,
          singleton: singleton
        };
}

var A;

var O;

exports.A = A;
exports.O = O;
exports.Validation = Validation;
exports.Make = Make;
exports.MakeCompare = MakeCompare;
exports.MakeSet = MakeSet;
exports.MakeStringSet = MakeStringSet;
/* No side effect */
